
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitMagnetometerService.h:

Program Listing for File MicroBitMagnetometerService.h
======================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitMagnetometerService.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/bluetooth/MicroBitMagnetometerService.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MICROBIT_MAGNETOMETER_SERVICE_H
   #define MICROBIT_MAGNETOMETER_SERVICE_H
   
   #include "MicroBitConfig.h"
   
   #if CONFIG_ENABLED(DEVICE_BLE)
   
   #include "MicroBitBLEManager.h"
   #include "MicroBitBLEService.h"
   #include "MicroBitCompass.h"
   #include "EventModel.h"
   
   #define COMPASS_CALIBRATION_STATUS_UNKNOWN 0
   #define COMPASS_CALIBRATION_REQUESTED      1
   #define COMPASS_CALIBRATION_COMPLETED_OK   2
   #define COMPASS_CALIBRATION_COMPLETED_ERR  3
   
   
   class MicroBitMagnetometerService : public MicroBitBLEService
   {
       public:
   
       MicroBitMagnetometerService(BLEDevice &_ble, codal::Compass &_compass);
   
       private:
   
       void read();
   
       void listen( bool yes);
   
       void onConnect( const microbit_ble_evt_t *p_ble_evt);
   
       void onDisconnect( const microbit_ble_evt_t *p_ble_evt);
       
       void onDataWritten(const microbit_ble_evt_write_t *params);
   
       void magnetometerUpdate();
   
       void samplePeriodUpdateNeeded();
   
       void calibrateCompass();
   
       void compassEvents(MicroBitEvent e);
   
       // Compass we're using.
       codal::Compass     &compass;
   
       // memory for our characteristics.
       int16_t             magnetometerDataCharacteristicBuffer[3];
       uint16_t            magnetometerBearingCharacteristicBuffer;
       uint16_t            magnetometerPeriodCharacteristicBuffer;
       uint8_t             magnetometerCalibrationCharacteristicBuffer;
   
       // Index for each charactersitic in arrays of handles and UUIDs
       typedef enum mbbs_cIdx
       {
           mbbs_cIdxDATA,
           mbbs_cIdxBEARING,
           mbbs_cIdxPERIOD,
           mbbs_cIdxCALIB,
           mbbs_cIdxCOUNT
       } mbbs_cIdx;
       
       // UUIDs for our service and characteristics
       static const uint16_t serviceUUID;
       static const uint16_t charUUID[ mbbs_cIdxCOUNT];
       
       // Data for each characteristic when they are held by Soft Device.
       MicroBitBLEChar      chars[ mbbs_cIdxCOUNT];
   
       public:
       
       int              characteristicCount()          { return mbbs_cIdxCOUNT; };
       MicroBitBLEChar *characteristicPtr( int idx)    { return &chars[ idx]; };
   };
   
   #endif
   #endif
