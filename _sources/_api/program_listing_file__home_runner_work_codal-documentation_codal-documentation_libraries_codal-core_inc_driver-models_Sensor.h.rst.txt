
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Sensor.h:

Program Listing for File Sensor.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Sensor.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/driver-models/Sensor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   Copyright (c) 2018 Paul ADAM, inidinn.com
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef SENSOR_H
   #define SENSOR_H
   
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "Event.h"
   
   
   #define SENSOR_THRESHOLD_LOW 1
   #define SENSOR_THRESHOLD_HIGH 2
   #define SENSOR_UPDATE_NEEDED 3
   
   #define SENSOR_INITIALISED 0x01
   #define SENSOR_HIGH_THRESHOLD_PASSED 0x02
   #define SENSOR_LOW_THRESHOLD_PASSED 0x04
   #define SENSOR_LOW_THRESHOLD_ENABLED 0x08
   #define SENSOR_HIGH_THRESHOLD_ENABLED 0x10
   
   #define SENSOR_DEFAULT_SENSITIVITY 868
   #define SENSOR_DEFAULT_SAMPLE_PERIOD 500
   
   namespace codal
   {
       class Sensor : public CodalComponent
       {
           protected:
   
           uint16_t samplePeriod;       // The time between samples, in milliseconds.
           uint16_t sensitivity;        // A value between 0..1023 used with a decay average to smooth the sample data.
           uint16_t highThreshold;      // threshold at which a HIGH event is generated
           uint16_t lowThreshold;       // threshold at which a LOW event is generated
           uint16_t sensorValue;        // Last sampled data.
   
           public:
   
           Sensor(uint16_t id, uint16_t sensitivity = SENSOR_DEFAULT_SENSITIVITY, uint16_t samplePeriod = SENSOR_DEFAULT_SAMPLE_PERIOD);
   
           /*
            * Event Handler for periodic sample timer
            */
           void onSampleEvent(Event);
   
           virtual void updateSample();
   
           /*
            * Determines the instantaneous value of the sensor, in SI units, and returns it.
            *
            * @return The current value of the sensor.
            */
           int getValue();
   
           int setPeriod(int period);
   
           int getPeriod();
   
           int setLowThreshold(uint16_t value);
   
           int setHighThreshold(uint16_t value);
   
           int getLowThreshold();
   
           int getHighThreshold();
   
           int setSensitivity(uint16_t value);
   
           ~Sensor();
   
           protected:
           
           void checkThresholding();
   
           virtual int readValue( ) = 0;
   
       };
   }
   
   #endif
