
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_StreamNormalizer.h:

Program Listing for File StreamNormalizer.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_StreamNormalizer.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/StreamNormalizer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #include "CodalConfig.h"
   #include "DataStream.h"
   
   #ifndef STREAM_NORMALIZER_H
   #define STREAM_NORMALIZER_H
   
   typedef int (*SampleReadFn)(uint8_t *);
   typedef void (*SampleWriteFn)(uint8_t *, int);
   
   
   namespace codal{
   
       class StreamNormalizer : public DataSink, public DataSource
       {
       public:
           int             outputFormat;           // The format to output in. By default, this is the sme as the input.
           int             stabilisation;          // The % stability of the zero-offset calculation required to begin operation.
           float           gain;                   // Gain to apply.
           float           zeroOffset;             // Best estimate of the zero point of the data source.
           uint32_t        orMask;                 // post processing step - or'd with each sample.
           bool            normalize;              // If set, will recalculate a zero offset.
           bool            zeroOffsetValid;        // Set to true after the first buffer has been processed.
           bool            outputEnabled;          // When set any buffer processed will be forwarded downstream.
           DataSource      &upstream;              // The upstream component of this StreamNormalizer.
           DataStream      output;                 // The downstream output stream of this StreamNormalizer.
           ManagedBuffer   buffer;                 // The buffer being processed.
   
           static SampleReadFn readSample[9];
           static SampleWriteFn writeSample[9];
   
           StreamNormalizer(DataSource &source, float gain = 1.0f, bool normalize = false, int format = DATASTREAM_FORMAT_UNKNOWN, int stabilisation = 0);
   
           virtual int pullRequest();
   
           virtual ManagedBuffer pull();
   
           int setNormalize(bool normalize);
   
           bool getNormalize();
   
           virtual int getFormat();
   
           virtual int setFormat(int format);
   
           int setGain(float gain);
   
           float getGain();
   
           int setOrMask(uint32_t mask);
   
           ~StreamNormalizer();
   
       };
   }
   
   #endif
