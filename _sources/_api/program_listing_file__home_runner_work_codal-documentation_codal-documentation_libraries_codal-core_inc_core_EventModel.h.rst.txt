
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_core_EventModel.h:

Program Listing for File EventModel.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_core_EventModel.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/core/EventModel.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef EVENT_MODEL_H
   #define EVENT_MODEL_H
   
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "Event.h"
   #include "CodalListener.h"
   #include "ErrorNo.h"
   
   namespace codal
   {
       class EventModel
       {
           uint16_t eventHandle;
   
           protected:
   
           void (*listener_deletion_callback)(Listener *);         // An optional callback function that is invoked when a listener is removed.
   
           public:
   
           static EventModel *defaultEventBus;
   
           EventModel() : listener_deletion_callback(NULL) {}
           virtual int send(Event)
           {
               return DEVICE_NOT_SUPPORTED;
           }
   
           virtual int add(Listener*)
           {
               return DEVICE_NOT_SUPPORTED;
           }
   
           virtual int remove(Listener *)
           {
               return DEVICE_NOT_SUPPORTED;
           }
   
           virtual Listener *elementAt(int)
           {
               return NULL;
           }
   
           static int setDefaultEventModel(EventModel &model)
           {
               EventModel::defaultEventBus = &model;
               return DEVICE_OK;
           }
   
           int setListenerDeletionCallback(void (*listener_deletion_callback)(Listener *))
           {
               this->listener_deletion_callback = listener_deletion_callback;
               return DEVICE_OK;
           }
   
           int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
           {
               if (handler == NULL)
                   return DEVICE_INVALID_PARAMETER;
   
               if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                   return DEVICE_INVALID_PARAMETER;
   
               Listener *newListener = new Listener(id, value, handler, flags);
   
               if(add(newListener) == DEVICE_OK)
                   return DEVICE_OK;
   
               delete newListener;
   
               return DEVICE_NOT_SUPPORTED;
           }
   
           int listen(int id, int value, void (*handler)(Event, void*), void* arg, uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
           {
               if (handler == NULL)
                   return DEVICE_INVALID_PARAMETER;
   
               if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                   return DEVICE_INVALID_PARAMETER;
   
               Listener *newListener = new Listener(id, value, handler, arg, flags);
   
               if(add(newListener) == DEVICE_OK)
                   return DEVICE_OK;
   
               delete newListener;
   
               return DEVICE_NOT_SUPPORTED;
           }
   
           template <typename T>
           int listen(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS);
   
           int listen(CodalComponent& component, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
           {
               return listen(component.id, value, handler, flags);
           }
   
           int listen(CodalComponent& component, int value, void (*handler)(Event, void*), void* arg, uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
           {
               return listen(component.id, value, handler, arg, flags);
           }
   
           template <typename T>
           int listen(CodalComponent& component, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS);
   
   
           int ignore(int id, int value, void (*handler)(Event))
           {
               if (handler == NULL)
                   return DEVICE_INVALID_PARAMETER;
   
               Listener listener(id, value, handler);
               remove(&listener);
   
               return DEVICE_OK;
           }
   
           int ignore(int id, int value, void (*handler)(Event, void*))
           {
               if (handler == NULL)
                   return DEVICE_INVALID_PARAMETER;
   
               Listener listener(id, value, handler, NULL);
               remove(&listener);
   
               return DEVICE_OK;
           }
   
           template <typename T>
           int ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event));
   
           int ignore(CodalComponent& component, int value, void (*handler)(Event))
           {
               return ignore(component.id, value, handler);
           }
   
           int ignore(CodalComponent& component, int value, void (*handler)(Event, void*))
           {
               return ignore(component.id, value, handler);
           }
   
           template <typename T>
           int ignore(CodalComponent& component, uint16_t value, T* object, void (T::*handler)(Event));
   
       };
   
       template <typename T>
       int EventModel::listen(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags)
       {
           if (object == NULL || handler == NULL)
               return DEVICE_INVALID_PARAMETER;
   
           if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
               return DEVICE_INVALID_PARAMETER;
   
           Listener *newListener = new Listener(id, value, object, handler, flags);
   
           if(add(newListener) == DEVICE_OK)
               return DEVICE_OK;
   
           delete newListener;
           return DEVICE_NOT_SUPPORTED;
       }
   
       template <typename T>
       int EventModel::listen(CodalComponent& component, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags)
       {
           return listen(component.id, value, object, handler, flags);
       }
   
       template <typename T>
       int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
       {
           if (handler == NULL)
               return DEVICE_INVALID_PARAMETER;
   
           Listener listener(id, value, object, handler);
           remove(&listener);
   
           return DEVICE_OK;
       }
   
       template <typename T>
       int EventModel::ignore(CodalComponent& component, uint16_t value, T* object, void (T::*handler)(Event))
       {
           return ignore(component.id, value, object, handler);
       }
   }
   
   #endif
