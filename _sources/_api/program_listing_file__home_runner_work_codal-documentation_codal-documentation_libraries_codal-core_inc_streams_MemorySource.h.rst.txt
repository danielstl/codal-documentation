
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_MemorySource.h:

Program Listing for File MemorySource.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_MemorySource.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/MemorySource.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2020 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #include "CodalConfig.h"
   #include "DataStream.h"
   
   #ifndef MEMORY_SOURCE_H
   #define MEMORY_SOURCE_H
   
   #define MEMORY_SOURCE_DEFAULT_MAX_BUFFER        256
   
   namespace codal
   {
       class MemorySource : public DataSource
       {
           private:
           int             outputFormat;           // The format to output in. By default, this is the same as the input.
           int             outputBufferSize;       // The maximum size of an output buffer.
           ManagedBuffer   buffer;                 // The output buffer being filled
   
           uint8_t         *data;                  // The input data being played (immutable)
           uint8_t         *in;                    // The input data being played (mutable)
           int             length;                 // The lenght of the input buffer (immutable)
           int             bytesToSend;            // The lenght of the input buffer (mutable)
           int             count;                   // The number of times left to repeat
   
           DataSink        *downstream;            // Pointer to our downstream component
           bool            blockingPlayout;        // Set to true if a blocking playout has been requested
           FiberLock       lock;                   // used to synchronise blocking play calls.
   
           public:
           DataSource      &output;                // DEPRECATED: backward compatilbity only
   
           MemorySource();
   
           virtual ManagedBuffer pull();
   
           virtual int getFormat();
   
           virtual int setFormat(int format);
   
           /*
            * Allow out downstream component to register itself with us
            */
           virtual void connect(DataSink &sink);
   
   
           int getBufferSize();
   
           int setBufferSize(int size);
   
           void play(const void *data, int length, int count = 1);
   
           void play(ManagedBuffer b, int count = 1);
   
           void playAsync(const void *data, int length, int count = 1);
   
           void playAsync(ManagedBuffer b, int count = 1);
   
   
           private:
           void _play(const void *data, int length, int count, bool mode);
       };
   }
   #endif
