
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_LEDMatrix.h:

Program Listing for File LEDMatrix.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_LEDMatrix.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/LEDMatrix.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef LED_MATRIX_H
   #define LED_MATRIX_H
   
   #include "CodalConfig.h"
   #include "ManagedString.h"
   #include "CodalComponent.h"
   #include "Display.h"
   #include "Image.h"
   #include "Pin.h"
   #include "Timer.h"
   
   //
   // Internal constants
   //
   #define LED_MATRIX_GREYSCALE_BIT_DEPTH            8
   
   //
   // Event codes raised by an LEDMatrix
   //
   #define LED_MATRIX_EVT_LIGHT_SENSE                2
   #define LED_MATRIX_EVT_FRAME_TIMEOUT              3
   
   //
   // Compile Time Configuration Options
   //
   
   // Selects the minimum permissable brightness level for the device
   // in the region of 0 (off) to 255 (full brightness)
   #ifndef LED_MATRIX_MINIMUM_BRIGHTNESS
   #define LED_MATRIX_MINIMUM_BRIGHTNESS               1
   #endif
   
   // Selects the maximum permissable brightness level for the device
   // in the region of 0 (off) to 255 (full brightness)
   #ifndef LED_MATRIX_MAXIMUM_BRIGHTNESS
   #define LED_MATRIX_MAXIMUM_BRIGHTNESS               255
   #endif
   
   // Selects the default brightness for the display
   // in the region of zero (off) to 255 (full brightness)
   #ifndef LED_MATRIX_DEFAULT_BRIGHTNESS
   #define LED_MATRIX_DEFAULT_BRIGHTNESS               LED_MATRIX_MAXIMUM_BRIGHTNESS
   #endif
   
   namespace codal
   {
       //
       // The different modes that this driver can operate in
       //
       enum DisplayMode {
           DISPLAY_MODE_BLACK_AND_WHITE,
           DISPLAY_MODE_GREYSCALE,
           DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE,
           DISPLAY_MODE_GREYSCALE_LIGHT_SENSE
       };
   
       //
       // Valid rotation settings.
       //
       enum DisplayRotation {
           MATRIX_DISPLAY_ROTATION_0,
           MATRIX_DISPLAY_ROTATION_90,
           MATRIX_DISPLAY_ROTATION_180,
           MATRIX_DISPLAY_ROTATION_270
       };
   
       struct MatrixPoint
       {
           uint8_t x;
           uint8_t y;
       };
   #define NO_CONN 0
   
       struct MatrixMap
       {
           int         width;                      // The physical width of the LED matrix, in pixels.
           int         height;                     // The physical height of the LED matrix, in pixels.
           int         rows;                       // The number of drive pins connected to LEDs.
           int         columns;                    // The number of sink pins connected to the LEDs.
   
           Pin         **rowPins;                  // Array of pointers containing an ordered list of pins to drive.
           Pin         **columnPins;               // Array of pointers containing an ordered list of pins to sink.
   
           const       MatrixPoint *map;           // Table mapping logical LED positions to physical positions.
       };
   
       class LEDMatrix : public Display
       {
           uint8_t strobeRow;
           uint8_t rotation;
           uint8_t mode;
           uint8_t greyscaleBitMsk;
           uint8_t timingCount;
           int frameTimeout;
   
           //
           // State used by all animation routines.
           //
   
           const MatrixMap &matrixMap;
   
           // Internal methods to handle animation.
   
           void renderFinish();
   
           void onTimeoutEvent(Event);
   
           void render();
   
           void renderWithLightSense();
   
           void renderGreyscale();
   
           void setEnable(bool enableDisplay);
   
           public:
   
           LEDMatrix(const MatrixMap &map, uint16_t id = DEVICE_ID_DISPLAY);
   
           virtual void periodicCallback();
   
           void setDisplayMode(DisplayMode mode);
   
           int getDisplayMode();
   
           void rotateTo(DisplayRotation position);
   
           virtual void enable();
   
           virtual void disable();
   
           void clear();
   
           virtual int setBrightness(int b);
   
   
           ~LEDMatrix();
       };
   }
   
   #endif
