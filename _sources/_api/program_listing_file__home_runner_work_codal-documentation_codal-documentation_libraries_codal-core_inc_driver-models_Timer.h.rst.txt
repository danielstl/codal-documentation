
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Timer.h:

Program Listing for File Timer.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Timer.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/driver-models/Timer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_TIMER_H
   #define CODAL_TIMER_H
   
   #include "CodalConfig.h"
   #include "ErrorNo.h"
   #include "LowLevelTimer.h"
   
   #ifndef CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE
   #define CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE     10
   #endif
   
   //
   // TimerEvent flags
   //
   #define CODAL_TIMER_EVENT_FLAGS_NONE    0
   #define CODAL_TIMER_EVENT_FLAGS_WAKEUP  0x01
   
   namespace codal
   {
       struct TimerEvent
       {
           CODAL_TIMESTAMP period;
           CODAL_TIMESTAMP timestamp;
           uint16_t id;
           uint16_t value;
           uint32_t flags; // We only need one byte, but sizeof(TimerEvent) is still 24
   
           void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE)
           {
               this->timestamp = timestamp;
               this->period = period;
               this->id = id;
               this->value = value;
               this->flags = flags;
           }
       };
   
       class Timer
       {
   #if CONFIG_ENABLED(CODAL_TIMER_32BIT)
           uint32_t sigma;
           uint32_t delta;
   #else
           uint16_t sigma;
           uint16_t delta;
   #endif
           LowLevelTimer& timer;
   
           void sync();
   
           void triggerIn(CODAL_TIMESTAMP t);
   
           void recomputeNextTimerEvent();
   
       public:
   
           uint8_t ccPeriodChannel;
           uint8_t ccEventChannel;
   
           Timer(LowLevelTimer& t, uint8_t ccPeriodChannel = 0, uint8_t ccEventChannel = 1);
   
           CODAL_TIMESTAMP getTime();
   
           CODAL_TIMESTAMP getTimeUs();
   
           int eventAfter(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
           int eventAfterUs(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
           int eventEvery(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
           int eventEveryUs(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
           int cancel(uint16_t id, uint16_t value);
   
           ~Timer();
   
           void trigger(bool isFallback);
   
           CODAL_TIMESTAMP deepSleepBegin( CODAL_TIMESTAMP &counter);
   
           void deepSleepEnd( CODAL_TIMESTAMP counter, CODAL_TIMESTAMP micros);
   
           bool deepSleepWakeUpTime( CODAL_TIMESTAMP &timestamp);
   
           virtual int enableInterrupts();
   
           virtual int disableInterrupts();
   
       protected:
           CODAL_TIMESTAMP currentTime;
           CODAL_TIMESTAMP currentTimeUs;
           uint32_t overflow;
   
           TimerEvent *timerEventList;
           TimerEvent *nextTimerEvent;
           int eventListSize;
   
           TimerEvent *getTimerEvent();
           void releaseTimerEvent(TimerEvent *event);
           int setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat, uint32_t flags);
           TimerEvent *deepSleepWakeUpEvent();
       };
   
       /*
        *
        * Convenience C API Interface that wraps this class, using the first compatible timer that is created
        *
        */
   
       CODAL_TIMESTAMP system_timer_current_time();
   
       CODAL_TIMESTAMP system_timer_current_time_us();
   
       int system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
       int system_timer_event_every(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
       int system_timer_event_after(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
       int system_timer_event_after_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, uint32_t flags = CODAL_TIMER_EVENT_FLAGS_NONE);
   
       int system_timer_cancel_event(uint16_t id, uint16_t value);
   
       int system_timer_calibrate_cycles();
   
       FORCE_RAM_FUNC
       void system_timer_wait_cycles(uint32_t cycles);
   
       int system_timer_wait_us(uint32_t period);
   
       int system_timer_wait_ms(uint32_t period);
   
       CODAL_TIMESTAMP system_timer_deepsleep_begin( CODAL_TIMESTAMP &counter);
   
       int system_timer_deepsleep_end( CODAL_TIMESTAMP counter, CODAL_TIMESTAMP micros);
   
       bool system_timer_deepsleep_wakeup_time( CODAL_TIMESTAMP &timestamp);
   
       extern Timer* system_timer;
   }
   
   #endif
