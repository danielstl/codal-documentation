
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitRadio.h:

Program Listing for File MicroBitRadio.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitRadio.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/MicroBitRadio.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MICROBIT_RADIO_H
   #define MICROBIT_RADIO_H
   
   namespace codal
   {
       class MicroBitRadio;
       struct FrameBuffer;
   }
   
   #include "CodalConfig.h"
   #include "codal-core/inc/types/Event.h"
   #include "PacketBuffer.h"
   #include "MicroBitRadioDatagram.h"
   #include "MicroBitRadioEvent.h"
   
   // Status Flags
   #define MICROBIT_RADIO_STATUS_INITIALISED       0x0001
   #define MICROBIT_RADIO_STATUS_DEEPSLEEP_IRQ     0x0002
   #define MICROBIT_RADIO_STATUS_DEEPSLEEP_INIT    0x0004
   
   // Default configuration values
   #define MICROBIT_RADIO_BASE_ADDRESS             0x75626974
   #define MICROBIT_RADIO_DEFAULT_GROUP            0
   #define MICROBIT_RADIO_DEFAULT_TX_POWER         7
   #define MICROBIT_RADIO_DEFAULT_FREQUENCY        7
   #define MICROBIT_RADIO_MAX_PACKET_SIZE          32
   #define MICROBIT_RADIO_HEADER_SIZE              4
   #define MICROBIT_RADIO_MAXIMUM_RX_BUFFERS       4
   #define MICROBIT_RADIO_POWER_LEVELS             10
   
   // Known Protocol Numbers
   #define MICROBIT_RADIO_PROTOCOL_DATAGRAM        1       // A simple, single frame datagram. a little like UDP but with smaller packets. :-)
   #define MICROBIT_RADIO_PROTOCOL_EVENTBUS        2       // Transparent propogation of events from one micro:bit to another.
   
   // Events
   #define MICROBIT_RADIO_EVT_DATAGRAM             1       // Event to signal that a new datagram has been received.
   
   namespace codal
   {
       struct FrameBuffer
       {
           uint8_t         length;                             // The length of the remaining bytes in the packet. includes protocol/version/group fields, excluding the length field itself.
           uint8_t         version;                            // Protocol version code.
           uint8_t         group;                              // ID of the group to which this packet belongs.
           uint8_t         protocol;                           // Inner protocol number c.f. those issued by IANA for IP protocols
   
           uint8_t         payload[MICROBIT_RADIO_MAX_PACKET_SIZE];    // User / higher layer protocol data
           FrameBuffer     *next;                              // Linkage, to allow this and other protocols to queue packets pending processing.
           int             rssi;                               // Received signal strength of this frame.
       };
   
   
       class MicroBitRadio : CodalComponent
       {
           uint8_t                 group;      // The radio group to which this micro:bit belongs.
           uint8_t                 queueDepth; // The number of packets in the receiver queue.
           int                     rssi;
           FrameBuffer             *rxQueue;   // A linear list of incoming packets, queued awaiting processing.
           FrameBuffer             *rxBuf;     // A pointer to the buffer being actively used by the RADIO hardware.
   
           public:
           MicroBitRadioDatagram   datagram;   // A simple datagram service.
           MicroBitRadioEvent      event;      // A simple event handling service.
           static MicroBitRadio    *instance;  // A singleton reference, used purely by the interrupt service routine.
   
           MicroBitRadio(uint16_t id = DEVICE_ID_RADIO);
   
           int setTransmitPower(int power);
   
           int setFrequencyBand(int band);
   
           FrameBuffer * getRxBuf();
   
           int queueRxBuf();
   
           int setRSSI(int rssi);
   
           int getRSSI();
   
           int enable();
   
           int disable();
   
           int setGroup(uint8_t group);
   
           virtual void idleCallback();
   
           int dataReady();
   
           FrameBuffer* recv();
   
           int send(FrameBuffer *buffer);
   
           virtual int setSleep(bool doSleep) override;
       };
   }
   
   #endif
