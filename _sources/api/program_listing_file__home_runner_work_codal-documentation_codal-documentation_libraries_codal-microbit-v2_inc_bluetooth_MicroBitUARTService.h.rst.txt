
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitUARTService.h:

Program Listing for File MicroBitUARTService.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitUARTService.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/bluetooth/MicroBitUARTService.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MICROBIT_UART_SERVICE_H
   #define MICROBIT_UART_SERVICE_H
   
   #include "MicroBitConfig.h"
   
   #if CONFIG_ENABLED(DEVICE_BLE)
   
   #include "MicroBitBLEManager.h"
   #include "MicroBitBLEService.h"
   #include "MicroBitSerial.h"
   
   #define MICROBIT_UART_S_DEFAULT_BUF_SIZE    20
   
   #define MICROBIT_UART_S_EVT_DELIM_MATCH     1
   #define MICROBIT_UART_S_EVT_HEAD_MATCH      2
   #define MICROBIT_UART_S_EVT_RX_FULL         3
   
   class MicroBitUARTService : public MicroBitBLEService
   {
       uint8_t* rxBuffer;
   
       uint8_t* txBuffer;
   
       uint8_t rxBufferHead;
       uint8_t rxBufferTail;
       uint8_t rxBufferSize;
   
       uint8_t txBufferSize;
   
       uint32_t rxCharacteristicHandle;
   
       //delimeters used for matching on receive.
       ManagedString delimeters;
   
       //a variable used when a user calls the eventAfter() method.
       int rxBuffHeadMatch;
       
       uint8_t txBufferHead;
       uint8_t txBufferTail;
   
       // the number of bytes from the tx buffer that have been sent, pending confirmation
       uint8_t txValueSize;
   
       bool waitingForEmpty;
   
       void onDisconnect( const microbit_ble_evt_t *p_ble_evt);
   
       void onConfirmation( const microbit_ble_evt_hvc_t *params);
       
       
       void onDataWritten(const microbit_ble_evt_write_t *params);
   
       void circularCopy(uint8_t *circularBuff, uint8_t circularBuffSize, uint8_t *linearBuff, uint16_t tailPosition, uint16_t headPosition);
   
       bool sendNext();
   
       public:
   
       MicroBitUARTService(BLEDevice &_ble, uint8_t rxBufferSize = MICROBIT_UART_S_DEFAULT_BUF_SIZE, uint8_t txBufferSize = MICROBIT_UART_S_DEFAULT_BUF_SIZE);
   
       int getc(MicroBitSerialMode mode = SYNC_SLEEP);
   
       int putc(char c, MicroBitSerialMode mode = SYNC_SLEEP);
   
       int send(const uint8_t *buf, int length, MicroBitSerialMode mode = SYNC_SLEEP);
   
       int send(ManagedString s, MicroBitSerialMode mode = SYNC_SLEEP);
   
       int read(uint8_t *buf, int len, MicroBitSerialMode mode = SYNC_SLEEP);
   
       ManagedString read(int len, MicroBitSerialMode mode = SYNC_SLEEP);
   
       ManagedString readUntil(ManagedString delimeters, MicroBitSerialMode mode = SYNC_SLEEP);
   
       int eventOn(ManagedString delimeters, MicroBitSerialMode mode = ASYNC);
   
       int eventAfter(int len, MicroBitSerialMode mode = ASYNC);
   
       int isReadable();
   
       int rxBufferedSize();
   
       int txBufferedSize();
       
       // Index for each charactersitic in arrays of handles and UUIDs
       typedef enum mbbs_cIdx
       {
           mbbs_cIdxTX,
           mbbs_cIdxRX,
           mbbs_cIdxCOUNT
       } mbbs_cIdx;
       
       // UUIDs for our service and characteristics
       static const uint8_t  base_uuid[ 16];
       static const uint16_t serviceUUID;
       static const uint16_t charUUID[ mbbs_cIdxCOUNT];
       
       // Data for each characteristic when they are held by Soft Device.
       MicroBitBLEChar      chars[ mbbs_cIdxCOUNT];
   
       public:
       
       int              characteristicCount()          { return mbbs_cIdxCOUNT; };
       MicroBitBLEChar *characteristicPtr( int idx)    { return &chars[ idx]; };
   };
   
   #endif
   #endif
