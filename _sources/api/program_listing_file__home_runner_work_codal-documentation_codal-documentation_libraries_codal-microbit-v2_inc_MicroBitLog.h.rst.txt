
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitLog.h:

Program Listing for File MicroBitLog.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitLog.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/MicroBitLog.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2020 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   /*
    * Log file system format:
    *
    * H = strlen(MICROBIT_LOG_HEADER) rounded up to page boundary.
    * N = (dataStart - H * PAGE_SIZE) / PAGE_SIZE
    * M = logLength - (N+H)*PAGE_SIZE
    * 
    * H x Header pages.
    * +===========================+
    * |     PREEFINED-HEADER      |
    * +===========================+
    * 
    * +===========================+
    * |                           |
    * |    MicroBitLogMetaData    |
    * |       (40 bytes)          |
    * |                           | 
    * +---------------------------+
    * |                           |
    * |     0x00 Init Region      |
    * |     (variable length)     |
    * |                           |
    * +---------------------------+
    * |                           |
    * | Comma separated Log Keys  |
    * |     (variable length)     |
    * |                           |
    * +---------------------------|
    * |                           |
    * |     0xFF Init Region      |
    * |     (variable length)     |
    * |                           |
    * +===========================+
    * 
    *
    * N x Journal Pages:
    * +===========================+
    * |                           |
    * |     0x00 Init Region      |
    * |     (variable length)     |
    * |                           |
    * +---------------------------+
    * |                           |
    * |      Logfile length       |
    * |         (12 bytes)        |
    * |                           |
    * +---------------------------|
    * |                           |
    * |     0xFF Init Region      |
    * |     (variable length)     |
    * |                           |
    * +===========================+
    * 
    * M x pages
    * +===========================+
    * |                           |
    * |         Log Data          |
    * |                           |
    * +---------------------------|
    * |                           |
    * |     0xFF Init Region      |
    * |     (variable length)     |
    * |                           |
    * +===========================+
    * 
    */
   
   #ifndef MICROBIT_LOG_H
   #define MICROBIT_LOG_H
   
   #include "MicroBitUSBFlashManager.h"
   #include "FSCache.h"
   #include "NRF52Serial.h"
   #include "ManagedString.h"
   
   #ifndef CONFIG_MICROBIT_LOG_METADATA_SIZE
   #define CONFIG_MICROBIT_LOG_METADATA_SIZE      2048
   #endif
   
   #ifndef CONFIG_MICROBIT_LOG_JOURNAL_SIZE
   #define CONFIG_MICROBIT_LOG_JOURNAL_SIZE       4096
   #endif
   
   
   #ifndef CONFIG_MICROBIT_LOG_CACHE_BLOCK_SIZE
   #define CONFIG_MICROBIT_LOG_CACHE_BLOCK_SIZE    256
   #endif
   
   #ifndef CONFIG_MICROBIT_LOG_FULL_ERASE_BY_DEFAULT
   #define CONFIG_MICROBIT_LOG_FULL_ERASE_BY_DEFAULT    false
   #endif
   
   #ifndef CONFIG_MICROBIT_LOG_INVALID_CHAR_VALUE
   #define CONFIG_MICROBIT_LOG_INVALID_CHAR_VALUE  '_'
   #endif
   
   #define MICROBIT_LOG_VERSION                "UBIT_LOG_FS_V_002\n"           // MUST be 18 characters.
   #define MICROBIT_LOG_JOURNAL_ENTRY_SIZE     8
   
   #define MICROBIT_LOG_STATUS_INITIALIZED     0x0001
   #define MICROBIT_LOG_STATUS_ROW_STARTED     0x0002
   #define MICROBIT_LOG_STATUS_FULL            0x0004
   #define MICROBIT_LOG_STATUS_SERIAL_MIRROR   0x0008
   
   
   #define MICROBIT_LOG_EVT_LOG_FULL           1
   
   namespace codal
   {
       struct MicroBitLogMetaData
       {
           char        version[18];             // MICROBIT_LOG_VERSION
           char        logEnd[11];              // 32 bit HEX representation containing end address of available storage (e.g. "0x0000FFFF\0")
           char        dataStart[11];           // 32 bit HEX representation of logical start address of data file (e.g. "0x00000200\0")
           char        daplinkVersion[5];       // 4 ASCII characters for the DAPLink version (e.g. "0255\0")
       };
   
       class ColumnEntry
       {
           public:
           ManagedString key;
           ManagedString value;
       };
   
       
       enum class TimeStampFormat
       {
           None = 0,
           Milliseconds = 1,
           Seconds = 10,
           Minutes = 600,
           Hours = 36000,
           Days = 864000
       };
   
       struct JournalEntry
       {
           char        length[MICROBIT_LOG_JOURNAL_ENTRY_SIZE];
           char        null;
   
           JournalEntry()
           {
               memcpy(length, "00000000", MICROBIT_LOG_JOURNAL_ENTRY_SIZE);
               null = 0;
           }
   
           void clear()
           {
               memset(length, 0, MICROBIT_LOG_JOURNAL_ENTRY_SIZE);
           }
   
           bool containsOnly(uint8_t value)
           {
               for (int i=0; i<MICROBIT_LOG_JOURNAL_ENTRY_SIZE;i++)
                   if (length[i] != value)
                       return false;
   
               return true;
           }
       };
   
   
       enum class DataFormat
       {
           HTMLHeader = 0,   // The HTML header without the data
           HTML = 1,         // The entire HTML file
           CSV = 2           // CSV data
       };
   
       class MicroBitLog 
       {
           private:
           MicroBitUSBFlashManager         &flash;             // Non-volatile memory controller to use for storage.
           MicroBitPowerManager            &power;             // To obtain the Interface chip firmware (DAPLink) version.
           NRF52Serial                     &serial;            // Reference to serial port used for data mirroring.
           FSCache                         cache;              // Write through RAM cache.
           uint32_t                        status;             // Status flags.
           FiberLock                       mutex;              // Mutual exclusion primitive to serialise APi calls.
   
           uint32_t                        startAddress;       // Logical address of the start of the Log file system.
           uint32_t                        journalPages;       // Number of physical pages allocated to journalling.
           uint32_t                        journalStart;       // logical address of the start of the journal section.
           uint32_t                        journalHead;        // Logical address of the last valid journal entry.
           uint32_t                        dataStart;          // Logical address of the start of the Data section.
           uint32_t                        dataEnd;            // Logical address of the end of valid data.
           uint32_t                        logEnd;             // Logical address of the end of the file system space.
           uint32_t                        headingStart;       // Logical address of the start of the column header data. Zero if no data is present.
           uint32_t                        headingLength;      // The length (in bytes) of the column header data.
           uint32_t                        headingCount;       // Total number of headings in the current log.
           bool                            headingsChanged;    // Flag to indicate if a row has been added that contains new columns.
           bool                            timeStampChanged;   // Flag to indicate if a timestamp format has changed.
   
           struct ColumnEntry*             rowData;            // Collection of key/value pairs. Used to accumulate each data row.
           struct MicroBitLogMetaData      metaData;           // Snapshot of the metadata held in flash storage.
           TimeStampFormat                 timeStampFormat;    // The format of timestamp to log on each row.
           ManagedString                   timeStampHeading;   // The title of the timestamp column, including units.
   
           const static uint8_t            header[2048];       // static header to prepend to FS in physical storage.
   
           public:
   
           MicroBitLog(MicroBitUSBFlashManager &flash, MicroBitPowerManager &power, NRF52Serial &serial);
   
           ~MicroBitLog();
   
           bool isPresent();
   
           bool isFull();
   
           void setVisibility(bool visible);
   
           void clear(bool fullErase = CONFIG_MICROBIT_LOG_FULL_ERASE_BY_DEFAULT);
   
           void invalidate();
   
   
           void setTimeStamp(TimeStampFormat format);
            
           void setSerialMirroring(bool enable);
   
   
           int beginRow();
   
           int logData(const char *key, const char *value);
   
           int logData(ManagedString key, ManagedString value);
   
           int endRow();
   
           int logString(const char *s);
   
           int logString(ManagedString s);
           
           uint32_t getDataLength(DataFormat format);
           
           int readData(void *data, uint32_t index, uint32_t len, DataFormat format, uint32_t length);
   
       private:
   
           void init();
   
           /*
            * Private APIs methods.
            * These methods enable the functionality of the public APIs, but assume mutual exclusion has already been acquired.
            */
           bool _isPresent();
           void _setVisibility(bool visible);
           void _clear(bool fullErase = CONFIG_MICROBIT_LOG_FULL_ERASE_BY_DEFAULT);
           void _invalidate();
           void _setTimeStamp(TimeStampFormat format);
           int _beginRow();
           int _endRow();
           int _logData(ManagedString key, ManagedString value);
           int _logString(const char *s);
           int _logString(ManagedString s);
   
           int _readData(uint8_t *data, uint32_t index, uint32_t len, DataFormat format, uint32_t length);
           
           int _readSource( uint8_t *&data, uint32_t &index, uint32_t &len, uint32_t &srcIndex, const void *srcPtr, uint32_t srcAddress, uint32_t srcLen);
   
           void addHeading(ManagedString key, ManagedString value, bool head = false);
   
           ManagedString cleanBuffer(const char *s, int len, bool removeSeparators = true);
       };
   }
   
   #endif
