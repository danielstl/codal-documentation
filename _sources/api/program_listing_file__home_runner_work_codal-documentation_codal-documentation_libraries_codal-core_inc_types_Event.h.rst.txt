
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_Event.h:

Program Listing for File Event.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_Event.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/types/Event.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_EVENT_H
   #define CODAL_EVENT_H
   
   #include "CodalConfig.h"
   
   // Wildcard event codes
   #define DEVICE_ID_ANY         0
   #define DEVICE_EVT_ANY        0
   
   namespace codal
   {
       enum EventLaunchMode
       {
           CREATE_ONLY,
           CREATE_AND_FIRE
       };
   
       #define DEVICE_EVENT_DEFAULT_LAUNCH_MODE     CREATE_AND_FIRE
   
       class Event
       {
           public:
   
           uint16_t            source;         // ID of the Device Component that generated the event e.g. DEVICE_ID_BUTTON_A.
           uint16_t            value;          // Component specific code indicating the cause of the event.
   
   #if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
           uint32_t            timestamp;      // Time at which the event was generated. us since power on.
   #else
           CODAL_TIMESTAMP     timestamp;      // Time at which the event was generated. us since power on.
   #endif
   
           Event(uint16_t source, uint16_t value, EventLaunchMode mode = DEVICE_EVENT_DEFAULT_LAUNCH_MODE);
   
           Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode = DEVICE_EVENT_DEFAULT_LAUNCH_MODE);
   
           Event();
   
           void fire();
       };
   
       struct EventQueueItem
       {
           Event evt;
           EventQueueItem *next;
   
           EventQueueItem(Event evt);
       };
   }
   
   #endif
