
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitFileSystem.h:

Program Listing for File MicroBitFileSystem.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroBitFileSystem.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/MicroBitFileSystem.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MICROBIT_FILE_SYSTEM_H
   #define MICROBIT_FILE_SYSTEM_H
   
   #include "MicroBitConfig.h"
   #include "MicroBitFlash.h"
   
   
   // Configuration options.
   #define MBFS_FILENAME_LENGTH        16        
   #define MBFS_MAGIC                  "MICROBIT_FS_1_0"
   
   // open() flags.
   #define MB_READ     0x01
   #define MB_WRITE    0x02
   #define MB_CREAT    0x04
   #define MB_APPEND   0x08
   
   // seek() flags.
   #define MB_SEEK_SET 0x01
   #define MB_SEEK_END 0x02
   #define MB_SEEK_CUR 0x04
   
   // Status flags
   #define MBFS_STATUS_INITIALISED           0x01
   
   // FileTable codes
   #define MBFS_UNUSED                       0xFFFF
   #define MBFS_EOF                          0xEFFF
   #define MBFS_DELETED                      0x0000
   
   // DirectorEntry flags
   #define MBFS_DIRECTORY_ENTRY_FREE         0x8000
   #define MBFS_DIRECTORY_ENTRY_VALID        0x4000
   #define MBFS_DIRECTORY_ENTRY_DIRECTORY    0x2000
   #define MBFS_DIRECTORY_ENTRY_NEW          0xffff
   #define MBFS_DIRECTORY_ENTRY_DELETED      0x0000
   
   // Enumeration of BLOCK YPES
   #define MBFS_BLOCK_TYPE_FILE              1
   #define MBFS_BLOCK_TYPE_DIRECTORY         2
   #define MBFS_BLOCK_TYPE_FILETABLE         3
   
   
   //
   // Every file in the file system has a file descriptor.
   // These are held in directory entries, using the following
   // structure.
   //
   struct DirectoryEntry
   {
       char file_name[MBFS_FILENAME_LENGTH];       // Name of the file.
       uint16_t first_block;                       // Logical block address of the start of the file.
       uint16_t flags;                             // Status of the file.
       uint32_t length;                            // Length of the file in bytes.
   };
   
   //
   // A directory is a list of DirectoryEntry structures:
   //
   struct Directory
   {
       DirectoryEntry entry[0];
   };
   
   //
   // A FileDescriptor holds contextual information needed for each OPEN file.
   //
   struct FileDescriptor
   {
       // read/write/creat flags.
       uint16_t flags;
   
       // FileDescriptor id
       uint16_t id;
   
       // current file position, in bytes.
       uint32_t seek;
   
       // the current file size. n.b. this may be different to that stored in the DirectoryEntry.
       uint32_t length;
   
       // the directory entry of this file. 
       DirectoryEntry *dirent;
   
       // the directory entry of our parent directory. 
       DirectoryEntry *directory;
   
       // We maintain a chain of open file descriptors. Reference to the next FileDescriptor in the chain.
       FileDescriptor *next;
   
       // Optional writeback cache, to minimise FLASH write operations at the expense of RAM.
       uint16_t cacheLength;
       uint8_t cache[MBFS_CACHE_SIZE];
   };
   
   class MicroBitFileSystem
   {
       private:
   
       // Status flags
       uint32_t status;
   
       // The instance of MicroBitFlash - the interface used for all flash writes/erasures
       MicroBitFlash flash;
   
       // Total Number of logical pages available for file data (including the file table)
       int    fileSystemSize;
   
       // Memory address of the start of the file system.
       uint16_t* fileSystemTable;
   
       // Size of the file table (blocks)
       uint16_t fileSystemTableSize;
   
       // Cache of the last block allocated. Used to enable round robin use of blocks.
       uint16_t lastBlockAllocated;
   
       // Reference to the root directory of the file system.
       DirectoryEntry *rootDirectory;
   
       // Chain of open files.
       FileDescriptor *openFiles;
   
       int init(uint32_t flashStart, int flashPages);
   
       int load();
   
       uint16_t getFreeBlock();
   
       uint32_t* getFreePage();
   
       DirectoryEntry* getDirectoryOf(char const * filename);
   
       DirectoryEntry* getDirectoryEntry(char const * filename, const DirectoryEntry *directory = NULL);
       
       DirectoryEntry* createFile(char const * filename, DirectoryEntry *directory, bool isDirectory);
   
       DirectoryEntry* createDirectoryEntry(DirectoryEntry *directory);
   
       int recycleBlock(uint16_t block, int type = MBFS_BLOCK_TYPE_FILE);
   
       int recycleFileTable();
   
       uint32_t *getPage(uint16_t block);
   
       uint32_t *getBlock(uint16_t block);
   
       uint16_t getNextFileBlock(uint16_t block);
   
       uint16_t getBlockNumber(void *address);
   
       uint16_t calculateFileTableSize();
   
       /*
       * Update a file table entry to a given value.
       *
       * @param block The block to update.
       * @param value The value to store in the file table.
       * @return MICROBIT_OK on success.
       */
       int fileTableWrite(uint16_t block, uint16_t value);
   
       FileDescriptor* getFileDescriptor(int fd, bool remove = false);
   
       int format();
   
       int writeBack(FileDescriptor *file);
   
       int writeBuffer(FileDescriptor *file, uint8_t* buffer, int length);
   
   
       bool isValidFilename(const char *name);
   
       public:
   
       static MicroBitFileSystem *defaultFileSystem;
   
       MicroBitFileSystem(uint32_t flashStart = 0, int flashPages = 0);
   
       int open(char const * filename, uint32_t flags);
   
       int flush(int fd);
   
       int close(int fd);
   
       int seek(int fd, int offset, uint8_t flags);
   
       int write(int fd, uint8_t* buffer, int size);
   
       int read(int fd, uint8_t* buffer, int size);
   
       int remove(char const * filename);
   
       int createDirectory(char const *name);
   };
   
   #endif
