
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_ManagedString.h:

Program Listing for File ManagedString.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_ManagedString.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/types/ManagedString.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MANAGED_STRING_H
   #define MANAGED_STRING_H
   
   #include "CodalConfig.h"
   #include "RefCounted.h"
   #include "ManagedBuffer.h"
   
   namespace codal
   {
       struct StringData : RefCounted
       {
           uint16_t len;
           char data[0];
       };
   
       // forward declaration required for a friend in a namespace...
       class ManagedString;
       ManagedString (operator+) (const ManagedString& lhs, const ManagedString& rhs);
   
       class ManagedString
       {
           // StringData contains the reference count, the length, follwed by char[] data, all in one block.
           // When referece count is 0xffff, then it's read only and should not be counted.
           // Otherwise the block was malloc()ed.
           // We control access to this to proide immutability and reference counting.
           StringData *ptr;
   
           public:
   
           ManagedString(StringData *ptr);
   
           StringData *leakData();
   
           ManagedString(const char *str);
   
           ManagedString(const int value);
   
   
           ManagedString(const char value);
   
           ManagedString(ManagedBuffer buffer);
   
           ManagedString(const char *str, const int16_t length);
   
           ManagedString(const ManagedString &s);
   
           ManagedString();
   
           ~ManagedString();
   
           ManagedString& operator = (const ManagedString& s);
   
           bool operator== (const ManagedString& s);
   
         bool operator!= (const ManagedString& s);
   
           bool operator< (const ManagedString& s);
   
           bool operator> (const ManagedString& s);
   
           ManagedString substring(int16_t start, int16_t length);
   
           friend ManagedString (codal::operator+) (const ManagedString& lhs, const ManagedString& rhs);
   
           char charAt(int16_t index);
   
   
           const char *toCharArray() const
           {
               return ptr->data;
           }
   
           int16_t length() const
           {
               return ptr->len;
           }
   
           static ManagedString EmptyString;
   
           private:
   
           void initEmpty();
   
           void initString(const char *str, int len);
   
           ManagedString(const ManagedString &s1, const ManagedString &s2);
   
       };
   }
   
   #endif
