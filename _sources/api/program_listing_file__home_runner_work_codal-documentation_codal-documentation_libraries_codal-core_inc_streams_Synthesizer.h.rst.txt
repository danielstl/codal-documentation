
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_Synthesizer.h:

Program Listing for File Synthesizer.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_Synthesizer.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/Synthesizer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_SYNTHESIZER_H
   #define CODAL_SYNTHESIZER_H
   
   #include "DataStream.h"
   
   #define SYNTHESIZER_SAMPLE_RATE        44100
   #define TONE_WIDTH                  1024
   
   namespace codal
   {
       typedef uint16_t (*SynthesizerGetSample)(void *arg, int position);
   
       class Synthesizer : public DataSource, public CodalComponent
       {
           int     samplePeriodNs;        // The length of a single sample, in nanoseconds.
           int     bufferSize;            // The number of samples to create in a single buffer before scheduling it for playback
   
           int     newPeriodNs;           // new period of waveform, if change has been requested.
           int     amplitude;             // The maximum amplitude of the wave to generate (the volume of the output)
           bool    active;                // Determines if background playback of audio is currently active.
           bool    synchronous;           // Determines if a synchronous mode of operation has been requested.
           bool    isSigned;              // If true, samples use int16_t otherwise uint16_t.
   
           ManagedBuffer buffer;          // Playout buffer.
           int     bytesWritten;          // Number of bytes written to the output buffer.
           void*   tonePrintArg;
           SynthesizerGetSample tonePrint;     // The tone currently selected playout tone (always unsigned).
           int     position;              // Position within the tonePrint
   
           public:
   
           DataStream output;
   
           static uint16_t SineTone(void *arg, int position);
           static uint16_t SawtoothTone(void *arg, int position);
           static uint16_t TriangleTone(void *arg, int position);
           static uint16_t SquareWaveTone(void *arg, int position);
           static uint16_t SquareWaveToneExt(void *arg, int position);
           static uint16_t NoiseTone(void *arg, int position);
           static uint16_t CustomTone(void *arg, int position);
   
           Synthesizer(int sampleRate = SYNTHESIZER_SAMPLE_RATE, bool isSigned = false);
   
           ~Synthesizer();
   
           int setFrequency(float frequency);
   
           int setFrequency(float frequency, int period, int envelopeStart = 1024, int envelopeEnd = 1024);
   
           int setVolume(int volume);
   
           int setBufferSize(int size);
   
           int getSampleRate();
   
           int setSampleRate(int sampleRate);
   
           virtual ManagedBuffer pull();
   
           virtual void idleCallback();
   
           void generate(int playoutTimeUs, int envelopeStart = 1024, int envelopeEnd = 1024);
   
           void setTone(SynthesizerGetSample tonePrint, void *arg = NULL);
           // legacy
           void setTone(const uint16_t *tonePrint) { setTone(CustomTone, (void*)tonePrint); }
   
           private:
   
           int determineSampleCount(int playoutTimeUs);
   
       };
   }
   
   #endif
