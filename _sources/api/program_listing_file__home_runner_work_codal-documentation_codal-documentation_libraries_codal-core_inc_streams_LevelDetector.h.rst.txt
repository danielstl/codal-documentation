
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_LevelDetector.h:

Program Listing for File LevelDetector.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_LevelDetector.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/LevelDetector.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #include "CodalConfig.h"
   #include "DataStream.h"
   
   #ifndef LEVEL_DETECTOR_H
   #define LEVEL_DETECTOR_H
   
   
   #define LEVEL_THRESHOLD_LOW                           1
   #define LEVEL_THRESHOLD_HIGH                          2
   
   #define LEVEL_DETECTOR_INITIALISED                       0x01
   #define LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED             0x02
   #define LEVEL_DETECTOR_LOW_THRESHOLD_PASSED              0x04
   
   #define LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE              128
   
   namespace codal{
       class LevelDetector : public CodalComponent, public DataSink
       {
       public:
   
           // The stream component that is serving our data
           DataSource      &upstream;          // The component producing data to process
           int             highThreshold;      // threshold at which a HIGH event is generated
           int             lowThreshold;       // threshold at which a LOW event is generated
           int             windowSize;         // The number of samples the make up a level detection window.
           int             windowPosition;     // The number of samples used so far in the calculation of a window.
           int             level;              // The current, instantaneous level.
           int             sigma;              // Running total of the samples in the current window.
           bool            activated;          // Has this component been connected yet.
   
   
           LevelDetector(DataSource &source, int highThreshold, int lowThreshold, uint16_t id = DEVICE_ID_SYSTEM_LEVEL_DETECTOR, bool connectImmediately  = true);
   
           virtual int pullRequest();
   
           /*
            * Determines the instantaneous value of the sensor, in SI units, and returns it.
            *
            * @return The current value of the sensor.
            */
           int getValue();
   
           int setLowThreshold(int value);
   
           int setHighThreshold(int value);
   
           int getLowThreshold();
   
           int getHighThreshold();
   
           int setWindowSize(int size);
   
           ~LevelDetector();
   
       };
   }
   
   #endif
