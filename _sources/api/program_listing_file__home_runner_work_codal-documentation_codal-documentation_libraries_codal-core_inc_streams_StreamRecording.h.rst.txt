
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_StreamRecording.h:

Program Listing for File StreamRecording.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_StreamRecording.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/StreamRecording.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef RECORDING_STREAM_H
   #define RECORDING_STREAM_H
   
   #include "ManagedBuffer.h"
   #include "DataStream.h"
   
   // Pretty much the largest sensible number we can have on a v2
   #define REC_MAX_BUFFERS     256
   
   #define REC_STATE_STOPPED   0
   #define REC_STATE_PLAYING   1
   #define REC_STATE_RECORDING 2
   
   namespace codal
   {
   
       class StreamRecording : public DataSource, public DataSink
       {
           private:
   
           ManagedBuffer buffer[REC_MAX_BUFFERS];
           unsigned int lastBuffer;
           unsigned int bufferLength;
           unsigned int readWriteHead;
           int state;
   
           DataSink *downStream;
           DataSource &upStream;
   
           public:
   
           StreamRecording( DataSource &source );
   
           ~StreamRecording();
   
           virtual ManagedBuffer pull();
           virtual int pullRequest();
           virtual void connect( DataSink &sink );
           virtual void disconnect();
           virtual int getFormat();
           virtual int setFormat( int format );
   
           int length();
   
           float duration( unsigned int sampleRate );
   
           void dumpState();
   
           bool canPull();
   
           bool isFull();
   
           bool record();
   
           bool play();
   
           void stop();
   
           void erase();
   
           bool isPlaying();
   
           bool isRecording();
   
           bool isStopped();
   
       };
   
   }
   
   #endif
