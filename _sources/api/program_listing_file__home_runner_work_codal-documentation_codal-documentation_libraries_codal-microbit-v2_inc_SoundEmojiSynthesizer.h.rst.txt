
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_SoundEmojiSynthesizer.h:

Program Listing for File SoundEmojiSynthesizer.h
================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_SoundEmojiSynthesizer.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/SoundEmojiSynthesizer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2020 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef SOUND_EMOJI_SYNTHESIZER_H
   #define SOUND_EMOJI_SYNTHESIZER_H
   
   #include "DataStream.h"
   
   #define EMOJI_SYNTHESIZER_SAMPLE_RATE         44100
   #define EMOJI_SYNTHESIZER_TONE_WIDTH          1024
   #define EMOJI_SYNTHESIZER_TONE_WIDTH_F        1024.0f
   #define EMOJI_SYNTHESIZER_BUFFER_SIZE         512
   
   #define EMOJI_SYNTHESIZER_TONE_EFFECT_PARAMETERS        2
   #define EMOJI_SYNTHESIZER_TONE_EFFECTS                  3
   
   //
   // Status flags
   //
   #define EMOJI_SYNTHESIZER_STATUS_ACTIVE                         0x01
   #define EMOJI_SYNTHESIZER_STATUS_OUTPUT_SILENCE_AS_EMPTY        0x02
   #define EMOJI_SYNTHESIZER_STATUS_STOPPING                       0x04
   
   
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_0 3010
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_1 3011
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_2 3012
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_3 3013
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_4 3014
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_5 3015
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_6 3016
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_7 3017
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_8 3018
   #define DEVICE_ID_SOUND_EMOJI_SYNTHESIZER_9 3019
   
   #define DEVICE_SOUND_EMOJI_SYNTHESIZER_EVT_DONE 1
   
   namespace codal
   {
   
       class SoundEmojiSynthesizer;
       typedef struct ToneEffect ToneEffect;
       typedef uint16_t (*TonePrintFunction)(void *arg, int position);
       typedef void     (*ToneEffectFunction)(SoundEmojiSynthesizer *synth, ToneEffect *context);
   
       typedef struct
       {
           TonePrintFunction       tonePrint;
           void *                  parameter;
       } TonePrint;
   
       struct ToneEffect
       {
           ToneEffectFunction      effect;                                                 // Effect function to invoke
           int                     step;                                                   // Current step being executed
           int                     steps;                                                  // Number of time-steps when to apply this effect
           union {
               float               parameter[EMOJI_SYNTHESIZER_TONE_EFFECT_PARAMETERS];    // Effect specific parameters
               uint32_t            parameter_i[EMOJI_SYNTHESIZER_TONE_EFFECT_PARAMETERS];  // Effect specific parameters
               const void *        parameter_p[EMOJI_SYNTHESIZER_TONE_EFFECT_PARAMETERS];  // Effect specific parameters     
           };
       };
   
       typedef struct
       {
           float               frequency;                                      // Central frequency of this sound effect
           float               volume;                                         // Central volume of this sound effect
           float               duration;                                       // Duration of the sound in milliseconds. Negative values are interpreted as infinite.
           TonePrint           tone;                                           // TonePrint function and parameters
           ToneEffect          effects[EMOJI_SYNTHESIZER_TONE_EFFECTS];        // Optional Effects to apply to the SoundEffect
       } SoundEffect;
   
       class SoundEmojiSynthesizer : public DataSource, public CodalComponent
       {
           public:
   
           DataSink*               downStream;             // Our downstream component.
           FiberLock               lock;                   // Ingress queue to handle concurrent playback requests.
           ManagedBuffer           buffer;                 // Current playout buffer.
           ManagedBuffer           effectBuffer;           // Current sound effect sequence being generated.
           ManagedBuffer           emptyBuffer;            // Zero length buffer.
           SoundEffect*            effect;                 // The effect within the current EffectBuffer that's being generated.
   
           int                     sampleRate;             // The sample rate of our output, measure in samples per second (e.g. 44000).
           float                   sampleRange;            // The maximum sample value that can be output.
           uint16_t                orMask;                 // A bitmask that is logically OR'd with each output sample.
           int                     bufferSize;             // The number of samples to create in a single buffer before scheduling it for playback
   
           float                   frequency;              // The instantaneous frequency currently being generated within an effect.
           float                   volume;                 // The instantaneous volume currently being generated within an effect.
           int                     samplesToWrite;         // The number of samples needed from the current sound effect block.
           int                     samplesWritten;         // The number of samples written from the current sound effect block.
           float                   position;               // Position within the tonePrint.
           float                   samplesPerStep[EMOJI_SYNTHESIZER_TONE_EFFECTS];     // The number of samples to render per step for each effect.
           SoundEmojiSynthesizer(uint16_t id, int sampleRate = EMOJI_SYNTHESIZER_SAMPLE_RATE);
   
           ~SoundEmojiSynthesizer();
   
           virtual void connect(DataSink &sink) override;
   
           virtual int getFormat() override;
   
           virtual ManagedBuffer pull() override;
   
           bool nextSoundEffect();
   
           int play(ManagedBuffer sound);
   
           void stop();
   
           int setBufferSize(int size);
   
           int getSampleRate();
   
           int setSampleRate(int sampleRate);
   
           uint16_t getSampleRange();
   
           int setSampleRange(uint16_t sampleRange);
   
           int setOrMask(uint16_t mask);
   
           void allowEmptyBuffers(bool mode);
   
   
           private:
   
           int determineSampleCount(float playoutTime);
   
       };
   }
   
   #endif
