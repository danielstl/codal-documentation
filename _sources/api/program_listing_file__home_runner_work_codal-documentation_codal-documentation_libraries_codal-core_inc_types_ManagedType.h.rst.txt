
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_ManagedType.h:

Program Listing for File ManagedType.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_ManagedType.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/types/ManagedType.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef DEVICE_MANAGED_TYPE_H
   #define DEVICE_MANAGED_TYPE_H
   
   #include "CodalConfig.h"
   
   template <class T>
   class ManagedType
   {
   protected:
   
       int *ref;
   
   public:
   
       T *object;
   
       ManagedType(T* object);
   
       ManagedType();
   
       ManagedType(const ManagedType<T> &t);
   
       ~ManagedType();
   
       ManagedType<T>& operator = (const ManagedType<T>&i);
   
       int getReferences();
   
       T& operator*() {
           return *object;
       }
   
       T* operator->() {
           if (object == NULL)
               target_panic(DEVICE_NULL_DEREFERENCE);
           return object;
       }
   
       T* get() {
           return object;
       }
   
       bool operator!=(const ManagedType<T>& x) {
           return !(this == x);
       }
   
       bool operator==(const ManagedType<T>& x) {
           return this->object == x.object;
       }
   };
   
   template<typename T>
   ManagedType<T>::ManagedType(T* object)
   {
       this->object = object;
       ref = (int *)malloc(sizeof(int));
       *ref = 1;
   }
   
   template<typename T>
   ManagedType<T>::ManagedType()
   {
       this->object = NULL;
       ref = (int *)malloc(sizeof(int));
       *ref = 0;
   }
   
   template<typename T>
   ManagedType<T>::ManagedType(const ManagedType<T> &t)
   {
       this->object = t.object;
       this->ref = t.ref;
       (*ref)++;
   }
   
   template<typename T>
   ManagedType<T>::~ManagedType()
   {
       // Special case - we were created using a default constructor, and never assigned a value.
       if (*ref == 0)
       {
           // Simply destroy our reference counter and we're done.
           free(ref);
       }
   
       // Normal case - we have a valid piece of data.
       // Decrement our reference counter and free all allocated memory if we're deleting the last reference.
       else if (--(*ref) == 0)
       {
           delete object;
           free(ref);
       }
   }
   
   template<typename T>
   ManagedType<T>& ManagedType<T>::operator = (const ManagedType<T>&t)
   {
       if (this == &t)
           return *this;
   
       // Special case - we were created using a default constructor, and never assigned a value.
       if (*ref == 0)
       {
           // Simply destroy our reference counter, as we're about to adopt another.
           free(ref);
       }
   
       else if (--(*ref) == 0)
       {
           delete object;
           free(ref);
       }
   
       object = t.object;
       ref = t.ref;
   
       (*ref)++;
   
       return *this;
   }
   
   template<typename T>
   int ManagedType<T>::getReferences()
   {
       return (*ref);
   }
   #endif
