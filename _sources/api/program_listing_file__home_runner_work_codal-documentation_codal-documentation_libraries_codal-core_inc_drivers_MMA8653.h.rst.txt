
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_MMA8653.h:

Program Listing for File MMA8653.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_MMA8653.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/MMA8653.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_MMA8635_H
   #define CODAL_MMA8635_H
   
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "CoordinateSystem.h"
   #include "I2C.h"
   #include "Accelerometer.h"
   
   
   #define MMA8653_DEFAULT_ADDR    0x3A
   
   #define MMA8653_STATUS          0x00
   #define MMA8653_OUT_X_MSB       0x01
   #define MMA8653_WHOAMI          0x0D
   #define MMA8653_XYZ_DATA_CFG    0x0E
   #define MMA8653_CTRL_REG1       0x2A
   #define MMA8653_CTRL_REG2       0x2B
   #define MMA8653_CTRL_REG3       0x2C
   #define MMA8653_CTRL_REG4       0x2D
   #define MMA8653_CTRL_REG5       0x2E
   
   
   #define MMA8653_WHOAMI_VAL      0x5A
   
   #define MMA8653_SAMPLE_RANGES   3
   #define MMA8653_SAMPLE_RATES    8
   
   struct MMA8653Sample
   {
       int16_t         x;
       int16_t         y;
       int16_t         z;
   };
   
   struct MMA8653SampleRateConfig
   {
       uint32_t        sample_period;
       uint8_t         ctrl_reg1;
   };
   
   struct MMA8653SampleRangeConfig
   {
       uint8_t         sample_range;
       uint8_t         xyz_data_cfg;
   };
   
   
   extern const MMA8653SampleRangeConfig MMA8653SampleRange[];
   extern const MMA8653SampleRateConfig MMA8653SampleRate[];
   
   
   namespace codal
   {
       class MMA8653 : public Accelerometer
       {
           uint16_t        address;            // I2C address of this accelerometer.
           Pin&            int1;               // Data ready interrupt.
           I2C&            i2c;                // The I2C interface to use.
   
           public:
   
           MMA8653(I2C &_i2c, Pin& int1, CoordinateSpace& cspace, uint16_t address = MMA8653_DEFAULT_ADDR, uint16_t id = DEVICE_ID_ACCELEROMETER);
   
           virtual int configure() override;
   
           virtual int requestUpdate() override;
   
           int whoAmI();
   
           virtual void idleCallback() override;
   
           virtual int setSleep(bool sleepMode);
       };
   }
   
   #endif
