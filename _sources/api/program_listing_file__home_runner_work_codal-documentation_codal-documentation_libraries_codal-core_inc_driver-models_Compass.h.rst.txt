
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Compass.h:

Program Listing for File Compass.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Compass.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/driver-models/Compass.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_COMPASS
   #define CODAL_COMPASS
   
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "Pin.h"
   #include "CoordinateSystem.h"
   #include "CodalUtil.h"
   #include "Accelerometer.h"
   
   
   #define COMPASS_STATUS_RUNNING                  0x01
   #define COMPASS_STATUS_CALIBRATED               0x02
   #define COMPASS_STATUS_CALIBRATING              0x04
   #define COMPASS_STATUS_ADDED_TO_IDLE            0x08
   
   #define COMPASS_EVT_DATA_UPDATE                 1
   #define COMPASS_EVT_CONFIG_NEEDED               2
   #define COMPASS_EVT_CALIBRATE                   3
   #define COMPASS_EVT_CALIBRATION_NEEDED          4
   
   namespace codal
   {
   
       struct CompassCalibration
       {
           Sample3D           centre;                  // Zero offset of the compass.
           Sample3D           scale;                   // Scale factor to apply in each axis to accomodate 1st order directional fields.
           int                radius;                  // Indication of field strength - the "distance" from the centre to outmost sample.
   
           CompassCalibration() : centre(), scale(1024, 1024, 1024)
           {
               radius = 0;
           }
       };
   
       class Compass : public CodalComponent
       {
           protected:
   
           uint16_t              samplePeriod;       // The time between samples, in milliseconds.
           CompassCalibration    calibration;        // The zero offset of this compass (generated by calibration)
           Sample3D              sample;             // The last sample read, in the coordinate system specified by the coordinateSpace variable.
           Sample3D              sampleENU;          // The last sample read, in raw ENU format (stored in case requests are made for data in other coordinate spaces)
           CoordinateSpace       &coordinateSpace;   // The coordinate space transform (if any) to apply to the raw data from the hardware.
           Accelerometer*        accelerometer;      // The accelerometer to use for tilt compensation.
   
           public:
   
           Compass(CoordinateSpace &coordinateSpace, uint16_t id = DEVICE_ID_COMPASS);
   
           Compass(Accelerometer &accel, CoordinateSpace &coordinateSpace, uint16_t id = DEVICE_ID_COMPASS);
   
           int heading();
   
           int getFieldStrength();
   
           int calibrate();
   
           void setCalibration(CompassCalibration calibration);
   
           CompassCalibration getCalibration();
   
           int isCalibrated();
   
           int isCalibrating();
   
           void clearCalibration();
   
           void setAccelerometer(Accelerometer &accelerometer);
   
           virtual int configure();
   
           virtual int setPeriod(int period);
   
           virtual int getPeriod();
   
           virtual int requestUpdate();
   
           virtual int update();
   
           Sample3D getSample(CoordinateSystem coordinateSystem);
   
           Sample3D getSample();
   
           int getX();
   
           int getY();
   
           int getZ();
   
   
           ~Compass();
   
           private:
   
           void init(uint16_t id);
   
           int tiltCompensatedBearing();
   
           int basicBearing();
       };
   }
   
   #endif
