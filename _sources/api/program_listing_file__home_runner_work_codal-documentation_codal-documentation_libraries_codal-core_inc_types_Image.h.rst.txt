
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_Image.h:

Program Listing for File Image.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_types_Image.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/types/Image.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef DEVICE_IMAGE_H
   #define DEVICE_IMAGE_H
   
   #include "CodalConfig.h"
   #include "ManagedString.h"
   #include "RefCounted.h"
   
   namespace codal
   {
       struct ImageData : RefCounted
       {
           uint16_t width;     // Width in pixels
           uint16_t height;    // Height in pixels
           uint8_t data[0];    // 2D array representing the bitmap image
       };
   
       class Image
       {
           ImageData *ptr;     // Pointer to payload data
   
   
           void init(const int16_t x, const int16_t y, const uint8_t *bitmap);
   
           void init_empty();
   
           public:
           static Image EmptyImage;    // Shared representation of a null image.
   
           ImageData *leakData();
   
           uint8_t *getBitmap()
           {
               return ptr->data;
           }
   
           Image(ImageData *ptr);
   
           Image();
   
   
           Image(const Image &image);
   
           explicit Image(const char *s);
   
           Image(const int16_t x, const int16_t y);
   
           Image(const int16_t x, const int16_t y, const uint8_t *bitmap);
   
           ~Image();
   
           Image& operator = (const Image& i);
   
   
           bool operator== (const Image& i);
   
           void clear();
   
           int setPixelValue(int16_t x , int16_t y, uint8_t value);
   
           int getPixelValue(int16_t x , int16_t y);
   
           int printImage(int16_t x, int16_t y, const uint8_t *bitmap);
   
           int paste(const Image &image, int16_t x = 0, int16_t y = 0, uint8_t alpha = 0);
   
           int print(char c, int16_t x = 0, int16_t y = 0);
   
           int shiftLeft(int16_t n);
   
           int shiftRight(int16_t n);
   
           int shiftUp(int16_t n);
   
           int shiftDown(int16_t n);
   
           int getWidth() const
           {
               return ptr->width;
           }
   
           int getHeight() const
           {
               return ptr->height;
           }
   
           int getSize() const
           {
               return ptr->width * ptr->height;
           }
   
           ManagedString toString();
   
           Image crop(int startx, int starty, int finx, int finy);
   
           bool isReadOnly();
   
           Image clone();
       };
   }
   
   #endif
