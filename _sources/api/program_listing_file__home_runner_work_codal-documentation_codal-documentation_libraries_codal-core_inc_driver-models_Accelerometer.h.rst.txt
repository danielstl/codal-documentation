
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Accelerometer.h:

Program Listing for File Accelerometer.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Accelerometer.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/driver-models/Accelerometer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_ACCELEROMETER_H
   #define CODAL_ACCELEROMETER_H
   
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "Pin.h"
   #include "CoordinateSystem.h"
   #include "CodalUtil.h"
   
   #define ACCELEROMETER_IMU_DATA_VALID               0x02
   
   #define ACCELEROMETER_EVT_DATA_UPDATE              1
   
   #define ACCELEROMETER_EVT_NONE                     0
   #define ACCELEROMETER_EVT_TILT_UP                  1
   #define ACCELEROMETER_EVT_TILT_DOWN                2
   #define ACCELEROMETER_EVT_TILT_LEFT                3
   #define ACCELEROMETER_EVT_TILT_RIGHT               4
   #define ACCELEROMETER_EVT_FACE_UP                  5
   #define ACCELEROMETER_EVT_FACE_DOWN                6
   #define ACCELEROMETER_EVT_FREEFALL                 7
   #define ACCELEROMETER_EVT_3G                       8
   #define ACCELEROMETER_EVT_6G                       9
   #define ACCELEROMETER_EVT_8G                       10
   #define ACCELEROMETER_EVT_SHAKE                    11
   #define ACCELEROMETER_EVT_2G                       12
   
   #define ACCELEROMETER_REST_TOLERANCE               200
   #define ACCELEROMETER_TILT_TOLERANCE               200
   #define ACCELEROMETER_FREEFALL_TOLERANCE           400
   #define ACCELEROMETER_SHAKE_TOLERANCE              400
   #define ACCELEROMETER_2G_TOLERANCE                 2048
   #define ACCELEROMETER_3G_TOLERANCE                 3072
   #define ACCELEROMETER_6G_TOLERANCE                 6144
   #define ACCELEROMETER_8G_TOLERANCE                 8192
   #define ACCELEROMETER_GESTURE_DAMPING              5
   #define ACCELEROMETER_SHAKE_DAMPING                10
   #define ACCELEROMETER_SHAKE_RTX                    30
   
   #define ACCELEROMETER_REST_THRESHOLD               (ACCELEROMETER_REST_TOLERANCE * ACCELEROMETER_REST_TOLERANCE)
   #define ACCELEROMETER_FREEFALL_THRESHOLD           ((uint32_t)ACCELEROMETER_FREEFALL_TOLERANCE * (uint32_t)ACCELEROMETER_FREEFALL_TOLERANCE)
   #define ACCELEROMETER_2G_THRESHOLD                 ((uint32_t)ACCELEROMETER_2G_TOLERANCE * (uint32_t)ACCELEROMETER_2G_TOLERANCE)
   #define ACCELEROMETER_3G_THRESHOLD                 ((uint32_t)ACCELEROMETER_3G_TOLERANCE * (uint32_t)ACCELEROMETER_3G_TOLERANCE)
   #define ACCELEROMETER_6G_THRESHOLD                 ((uint32_t)ACCELEROMETER_6G_TOLERANCE * (uint32_t)ACCELEROMETER_6G_TOLERANCE)
   #define ACCELEROMETER_8G_THRESHOLD                 ((uint32_t)ACCELEROMETER_8G_TOLERANCE * (uint32_t)ACCELEROMETER_8G_TOLERANCE)
   #define ACCELEROMETER_SHAKE_COUNT_THRESHOLD        4
   
   namespace codal
   {
       struct ShakeHistory
       {
           uint16_t    shaken:1,
                       x:1,
                       y:1,
                       z:1,
                       impulse_2,
                       impulse_3,
                       impulse_6,
                       impulse_8,
                       count:8;
   
           uint16_t    timer;
       };
   
       class Accelerometer : public CodalComponent
       {
           protected:
   
           uint16_t        samplePeriod;       // The time between samples, in milliseconds.
           uint8_t         sampleRange;        // The sample range of the accelerometer in g.
           Sample3D        sample;             // The last sample read, in the coordinate system specified by the coordinateSpace variable.
           Sample3D        sampleENU;          // The last sample read, in raw ENU format (stored in case requests are made for data in other coordinate spaces)
           CoordinateSpace &coordinateSpace;   // The coordinate space transform (if any) to apply to the raw data from the hardware.
   
           float           pitch;              // Pitch of the device, in radians.
           float           roll;               // Roll of the device, in radians.
   
           uint8_t         sigma;              // the number of ticks that the instantaneous gesture has been stable.
           uint8_t         impulseSigma;       // the number of ticks since an impulse event has been generated.
           uint16_t        lastGesture;        // the last, stable gesture recorded.
           uint16_t        currentGesture;     // the instantaneous, unfiltered gesture detected.
           ShakeHistory    shake;              // State information needed to detect shake events.
   
           public:
   
           Accelerometer(CoordinateSpace &coordinateSpace, uint16_t id = DEVICE_ID_ACCELEROMETER);
   
           virtual int setPeriod(int period);
   
           virtual int getPeriod();
   
           virtual int setRange(int range);
   
           virtual int getRange();
   
           virtual int configure();
   
           virtual int requestUpdate();
   
           virtual int update();
   
           Sample3D getSample(CoordinateSystem coordinateSystem);
   
           Sample3D getSample();
   
           int getX();
   
           int getY();
   
           int getZ();
   
           int getPitch();
   
           float getPitchRadians();
   
           int getRoll();
   
           float getRollRadians();
   
           uint16_t getGesture();
   
           ~Accelerometer();
   
           private:
   
           void recalculatePitchRoll();
   
           void updateGesture();
   
           uint32_t instantaneousAccelerationSquared();
   
           uint16_t instantaneousPosture();
       };
   }
   
   #endif
