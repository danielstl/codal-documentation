
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_DataStream.h:

Program Listing for File DataStream.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_DataStream.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/DataStream.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_DATA_STREAM_H
   #define CODAL_DATA_STREAM_H
   
   #include "ManagedBuffer.h"
   #include "MessageBus.h"
   
   #define DATASTREAM_MAXIMUM_BUFFERS      1
   
   // Define valid data representation formats supplied by a DataSource.
   // n.b. MUST remain in strict monotically increasing order of sample size.
   #define DATASTREAM_FORMAT_UNKNOWN           0 
   #define DATASTREAM_FORMAT_8BIT_UNSIGNED     1
   #define DATASTREAM_FORMAT_8BIT_SIGNED       2
   #define DATASTREAM_FORMAT_16BIT_UNSIGNED    3
   #define DATASTREAM_FORMAT_16BIT_SIGNED      4
   #define DATASTREAM_FORMAT_24BIT_UNSIGNED    5
   #define DATASTREAM_FORMAT_24BIT_SIGNED      6
   #define DATASTREAM_FORMAT_32BIT_UNSIGNED    7
   #define DATASTREAM_FORMAT_32BIT_SIGNED      8
   
   #define DATASTREAM_FORMAT_BYTES_PER_SAMPLE(x) ((x+1)/2)
   
   namespace codal
   {
       class DataSink
       {
           public:
   
           virtual int pullRequest();
       };
   
       class DataSource
       {
           public:
   
           virtual ManagedBuffer pull();
           virtual void connect(DataSink &sink);
           virtual void disconnect();
           virtual int getFormat();
           virtual int setFormat(int format);
       };
   
       class DataStream : public DataSource, public DataSink
       {
           ManagedBuffer stream[DATASTREAM_MAXIMUM_BUFFERS];
           int bufferCount;
           int bufferLength;
           int preferredBufferSize;
           int writers;
           uint16_t spaceAvailableEventCode;
           uint16_t pullRequestEventCode;
           bool isBlocking;
   
           DataSink *downStream;
           DataSource *upStream;
   
           public:
   
           DataStream(DataSource &upstream);
   
           ~DataStream();
   
           int get(int position);
   
           int set(int position, uint8_t value);
   
           int length();
   
             bool isReadOnly();
   
           virtual void connect(DataSink &sink) override;
   
           virtual void disconnect() override;
   
           virtual int getFormat() override;
   
           int getPreferredBufferSize();
   
           void setPreferredBufferSize(int size);
   
           void setBlocking(bool isBlocking);
   
           bool canPull(int size = 0);
   
           bool full();
   
           virtual ManagedBuffer pull();
   
           virtual int pullRequest();
   
           private:
           void onDeferredPullRequest(Event);
   
       };
   }
   
   #endif
