
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroSynth.h:

Program Listing for File MicroSynth.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_MicroSynth.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/MicroSynth.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   MIT License
   
   Copyright (c) 2022 Thom Johansen
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
   */
   
   #include "MicroBit.h"
   
   #if CONFIG_ENABLED(CODAL_POLYSYNTH)
   
   #ifndef MICROSYNTH_H
   #define MICROSYNTH_H
   
   #include <cmath>
   #include <cstdint>
   
   #define _PI 3.14159265359f
   
   namespace codal {
   
   
   static constexpr int SynthBlockSize = 256;
   static constexpr int SynthSampleRate = 44100;
   static constexpr float SynthSampleRate_f = static_cast<float>(SynthSampleRate);
   
   class SynthTables
   {
       static float notetab_[129]; // including guard point
       static bool inited_;
   public:
       static void init();
       static float noteToScaler(float ind);
   };
   
   enum class OscType : uint8_t
   {
       Saw = 0,
       Pulse,
       Triangle
   };
   
   enum class FilterType : uint8_t
   {
       LPF = 0,
       HPF,
       BPF
   };
   
   struct SynthPreset
   {
       // oscillator shapes
       OscType osc1Shape, osc2Shape;
       // additive transpose factor in notes, typical -24 to 24
       float osc2Transpose;
       // linear amplitude factor, 0 to 1
       float osc1Vol, osc2Vol;
       // -1 to 1, 0 is square
       float osc1Pw, osc2Pw;
       // LFO to osc PWM, 0 to 1
       float osc1Pwm, osc2Pwm;
       // Osc1 -> Osc2 PM amount
       float fmAmount;
       // filter type
       FilterType filterType;
       // 0 to 1, covers almost all spectrum
       float filterCutoff;
       // 1 is self resonance, 0 is no resonance
       float filterReso;
       // portion of envelope to add to vcfCutoff, 0 to 1
       float filterEnv;
       // portion of lfo to add to vcfCutoff, 0 to 1
       float filterLfo;
       // portion of note freq to add to cutoff, 0 to 1
       float filterKeyFollow;
       // seconds, sustain is amplitude factor 0 to 1
       float envA, envD, envS, envR;
       // shape of lfo
       OscType lfoShape;
       // frequency of lfo in hz
       float lfoFreq;
       // vibrato frequency in hz
       float vibFreq;
       // vibrato amount in semitones
       float vibAmount;
       // voi
       float gain;
       // relative tuning for everything, in semitones
       float tune;
       // level of noise, linear amplitude
       float noise;
       // true to use smoothed gate as amplitude envelope, adsr if false
       bool ampGate;
   };
   
   class StateVariableFilter
   {
       float g_, g1_, d_;
       float s1_, s2_;
       float tan(float x);
   public:
       StateVariableFilter();
       void set(float cutoff, float res);
       float process(float x, FilterType f = FilterType::LPF);
       void reset();
   };
   
   class ADSREnv
   {
       enum class State : uint8_t
       {
           A = 0, D, S, R, Done
       };
       float phase_, phase_inc_ = 0.f;
       float inc_[4] = { 0.f, 0.f, 0.f, 0.f };
       float levels_[5] = { 0.f, 1.f, 0.5f, 0.f, 0.f };
       float start_val_ = 0.f;
       float cur_ = 0.f;
       State state_;
   public:
       ADSREnv();
       float process();
       void gate(bool g = true);
       bool done() const;
       void set(float a, float d, float s, float r);
       void reset();
       float value() const;
   };
   
   class Oscillator
   {
       float acc_ = 0.f, delta_ = 0.f, pw_ = 0.f;
       OscType wave_ = OscType::Saw;
   public:
       float process();
       float processPM(float pm);
       void setFreq(float f);
       void setType(OscType t);
       void setPW(float pw);
   };
   
   class Voice
   {
       Oscillator osc_[2];
       Oscillator lfo_;
       Oscillator vibLfo_;
       StateVariableFilter filter_;
       ADSREnv env_;
       float gain_;            // gain and velocity combined
       float smoothedGate_;    // lowpass filtered gate for use instead of envelope
       int gateLength_ = -1;   // -1 means no preset time duration
       int8_t note_ = -1;      // -1 means inactive voice
       bool stopping_ = false; // set to true after we've received a note off
       const SynthPreset* preset_ = nullptr;
       int32_t noise_;         // linear congruential noise state
       void apply_preset();
       void set_note(float note);
       // per sample process
       float process();
   public:
       Voice();
       void process(float* buf, int num);
       void trig(int8_t note, float velocity, const SynthPreset* preset, int length = -1);
       void detrig();
       int8_t getNote() const;
       bool isStopping() const;
   };
   
   class PolySynth
   {
       Voice* voice_;
       float mixbuf_[SynthBlockSize];
       int numVoices_;
   
       int findVoice(int8_t note);
       Voice& alloc(int note);
       void process_noclip(float* buf, int num);
   public:
       PolySynth(int num_voices);
       ~PolySynth();
       void noteOn(int8_t note, float velocity, float duration, const SynthPreset* preset);
       void noteOff(int8_t note);
       void process(float* buf, int num);
       void process(uint16_t* buf, int num);
   };
   
   class PolySynthSource : public DataSource
   {
       DataSink* downStream_;
       bool init_ = false;
       PolySynth& synth_;
   public:
       PolySynthSource(PolySynth& s);
       void start();
       virtual void connect(DataSink& sink) override;
       virtual int getFormat() override;
       virtual ManagedBuffer pull() override;
   };
   
   } // namespace codal
   
   #endif
   
   #endif // CONFIG
