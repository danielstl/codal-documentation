
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_AnimatedDisplay.h:

Program Listing for File AnimatedDisplay.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_AnimatedDisplay.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/AnimatedDisplay.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_ANIMATED_DISPLAY_H
   #define CODAL_ANIMATED_DISPLAY_H
   
   #include "Display.h"
   #include "BitmapFont.h"
   
   #define DISPLAY_EVT_ANIMATION_COMPLETE          1
   
   //
   // Internal constants
   //
   #define DISPLAY_DEFAULT_AUTOCLEAR               1
   #define DISPLAY_SPACING                         1
   #define DISPLAY_ANIMATE_DEFAULT_POS             -255
   
   //
   // Compile time configuration options
   //
   // Defines the default scroll speed for the display, in the time taken to move a single pixel (ms).
   #ifndef DISPLAY_DEFAULT_SCROLL_SPEED
   #define DISPLAY_DEFAULT_SCROLL_SPEED                120
   #endif
   
   // Selects the number of pixels a scroll will move in each quantum.
   #ifndef DISPLAY_DEFAULT_SCROLL_STRIDE
   #define DISPLAY_DEFAULT_SCROLL_STRIDE       -1
   #endif
   
   // Selects the time each character will be shown on the display during print operations.
   // The time each character is shown on the screen  (ms).
   #ifndef DISPLAY_DEFAULT_PRINT_SPEED
   #define DISPLAY_DEFAULT_PRINT_SPEED         400
   #endif
   
   namespace codal
   {
       enum AnimationMode {
           ANIMATION_MODE_NONE,
           ANIMATION_MODE_STOPPED,
           ANIMATION_MODE_SCROLL_TEXT,
           ANIMATION_MODE_PRINT_TEXT,
           ANIMATION_MODE_SCROLL_IMAGE,
           ANIMATION_MODE_ANIMATE_IMAGE,
           ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR,
           ANIMATION_MODE_PRINT_CHARACTER
       };
   
       class AnimatedDisplay : public CodalComponent
       {
           // The Display instance that is used to show the text and graphic animations of this class
           Display& display;
   
           // The Font to use text operations (TODO: This is currently only partially implemented)
           BitmapFont font;
   
           //
           // State used by all animation routines.
           //
   
           // The animation mode that's currently running (if any)
           volatile AnimationMode animationMode;
   
           // The time in milliseconds between each frame update.
           uint16_t animationDelay;
   
           // The time in milliseconds since the frame update.
           uint16_t animationTick;
   
           // Stop playback of any animations
           void stopAnimation(int delay);
   
           //
           // State for scrollString() method.
           // This is a surprisingly intricate method.
           //
           // The text being displayed.
           ManagedString scrollingText;
   
           // The index of the character currently being displayed.
           int16_t scrollingChar;
   
           // The number of pixels the current character has been shifted on the display.
           int8_t scrollingPosition;
   
           //
           // State for printString() method.
           //
           // The text being displayed. NULL if no message is scheduled for playback.
           // We *could* get some reuse in here with the scroll* variables above,
           // but best to keep it clean in case kids try concurrent operation (they will!),
           // given the small RAM overhead needed to maintain orthogonality.
           ManagedString printingText;
   
           // The index of the character currently being displayed.
           int16_t printingChar;
   
           //
           // State for scrollImage() method.
           //
           // The image being displayed.
           Image scrollingImage;
   
           // The number of pixels the image has been shifted on the display.
           int16_t scrollingImagePosition;
   
           // The number of pixels the image is shifted on the display in each quantum.
           int8_t scrollingImageStride;
   
           // Flag to indicate if image has been rendered to screen yet (or not)
           bool scrollingImageRendered;
   
           private:
           // Internal methods to handle animation.
   
           void animationUpdate();
   
   
           void updateScrollText();
   
           void updatePrintText();
   
           void updateScrollImage();
   
           void updateAnimateImage();
   
           void sendAnimationCompleteEvent();
   
           void waitForFreeDisplay();
   
           void fiberWait();
   
           public:
           AnimatedDisplay(Display& display, uint16_t id = DEVICE_ID_DISPLAY);
   
           virtual void periodicCallback();
   
           void stopAnimation();
   
           int printCharAsync(char c, int delay = 0);
   
           int printAsync(ManagedString s, int delay = DISPLAY_DEFAULT_PRINT_SPEED);
   
           int printAsync(Image i, int x = 0, int y = 0, int alpha = 0, int delay = 0);
   
           int printChar(char c, int delay = 0);
   
           int print(ManagedString s, int delay = DISPLAY_DEFAULT_PRINT_SPEED);
   
           int print(Image i, int x = 0, int y = 0, int alpha = 0, int delay = 0);
   
           int scrollAsync(ManagedString s, int delay = DISPLAY_DEFAULT_SCROLL_SPEED);
   
           int scrollAsync(Image image, int delay = DISPLAY_DEFAULT_SCROLL_SPEED, int stride = DISPLAY_DEFAULT_SCROLL_STRIDE);
   
           int scroll(ManagedString s, int delay = DISPLAY_DEFAULT_SCROLL_SPEED);
   
           int scroll(Image image, int delay = DISPLAY_DEFAULT_SCROLL_SPEED, int stride = DISPLAY_DEFAULT_SCROLL_STRIDE);
   
           int animateAsync(Image image, int delay, int stride, int startingPosition = DISPLAY_ANIMATE_DEFAULT_POS, int autoClear = DISPLAY_DEFAULT_AUTOCLEAR);
   
           int animate(Image image, int delay, int stride, int startingPosition = DISPLAY_ANIMATE_DEFAULT_POS, int autoClear = DISPLAY_DEFAULT_AUTOCLEAR);
   
           ~AnimatedDisplay();
   
       };
   }
   
   #endif
