
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_Mixer2.h:

Program Listing for File Mixer2.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_Mixer2.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/Mixer2.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_MIXER2_H
   #define CODAL_MIXER2_H
   
   #include "DataStream.h"
   
   #ifndef CONFIG_MIXER_BUFFER_SIZE
   #define CONFIG_MIXER_BUFFER_SIZE 512
   #endif
   
   #ifndef CONFIG_MIXER_INTERNAL_RANGE
   #define CONFIG_MIXER_INTERNAL_RANGE 1023
   #endif
   
   #ifndef CONFIG_MIXER_DEFAULT_SAMPLERATE
   #define CONFIG_MIXER_DEFAULT_SAMPLERATE 44100
   #endif
   
   #define DEVICE_ID_MIXER 3030
   
   #define DEVICE_MIXER_EVT_SILENCE 1
   #define DEVICE_MIXER_EVT_SOUND   2
   
   
   namespace codal
   {
   
   class MixerChannel : public DataSink
   {
   private:
       DataSource      *stream;                    // The DataSource feeding this mixer channel.
       ManagedBuffer   buffer;                     // The last buffer received from the DataSource.
       int             pullRequests;               // The number of buffers ready to be read from the DataSource.
   
       uint8_t         *in;                        // Pointer to the next sample that should be read from the current buffer.
       uint8_t         *end;                       // Pointer to the end of the current buffer (optimisation).
   
       float           range;                      // The number of quantization levels in the input data.
       float           rate;                       // The sample rate of the input data.
       float           offset;                     // Offset applied to every sample before mixing (for unsigned samples)
       float           gain;                       // Input gain to applied ot each sample to normalise (optimisation)
       float           skip;                       // Number of input samples to progress for each output sample (when sub/super sampling)
       float           position;                   // fractional position within the buffer of next sample (sub/super sampling) 
   
       float           volume;                     // Volume leve of channel, in the range 0..CONFIG_MIXER_INTERNAL_RANGE
       int             format;                     // Format of the data recieved on this channel (e.g. DATASTREAM_FORMAT_16BIT_UNSIGNED...)
       int             bytesPerSample;             // The number of bytes used in the input stream for each sample (optimisation)
   
       MixerChannel    *next;                      // Internal Linkage - list of all mixer channels
   
       friend class    Mixer2;
   
   public:
   
       virtual int pullRequest();
       virtual ~MixerChannel() {};
   
       void setVolume( float volume ) { this->volume = volume; }
       float getVolume() { return this->volume; }
   };
   
   class Mixer2 : public DataSource
   {
       MixerChannel    *channels;
       DataSink        *downStream;
       float           mix[CONFIG_MIXER_BUFFER_SIZE];
       float           outputRange;
       float           outputRate;
       int             outputFormat;
       int             bytesPerSampleOut;
       float           volume;
       uint32_t        orMask;
       float           silenceLevel;
       bool            silent;
   
   public:
       Mixer2(float sampleRate = CONFIG_MIXER_DEFAULT_SAMPLERATE, int sampleRange = CONFIG_MIXER_INTERNAL_RANGE, int format = DATASTREAM_FORMAT_16BIT_UNSIGNED);
   
       ~Mixer2();
   
       MixerChannel *addChannel(DataSource &stream, float sampleRate = 0, int sampleRange = CONFIG_MIXER_INTERNAL_RANGE);
   
       int removeChannel( MixerChannel * channel );
   
       virtual ManagedBuffer pull();
   
       virtual void connect(DataSink &sink);
   
       virtual int getFormat();
   
       virtual int setFormat(int format);
   
   
       int getVolume();
   
       int setVolume(int volume);
   
       int setSampleRange(uint16_t sampleRange);
   
       int setSampleRate(float sampleRate);
   
       int getSampleRange();
   
       int getSampleRate();
   
       int setOrMask(uint32_t mask);
   
       int setSilenceLevel(float level);
       
       bool isSilent();
   
       private:
       void configureChannel(MixerChannel *c);
   };
   
   } // namespace codal
   
   #endif
